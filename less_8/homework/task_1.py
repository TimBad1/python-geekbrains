"""Реализовать класс Matrix (матрица).
Обеспечить перегрузку конструктора класса (метод init()),
который должен принимать данные (список списков) для формирования матрицы.
[[], [], []]
Следующий шаг — реализовать перегрузку метода str() для вывода матрицы
в привычном виде.

Далее реализовать перегрузку метода add() для реализации операции
сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.

Подсказка: сложение элементов матриц выполнять поэлементно —
первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.

Пример:
1 2 3
4 5 6
7 8 9

1 2 3
4 5 6
7 8 9

Сумма матриц:
2 4 6
8 10 12
14 16 18
"""
import numpy as np

class MyError(Exception):
    """Выбрасывание исключения и текста исключения при ошибке"""
    def __init__(self, text):
        self.txt = text

class Matrix:
    """class Matrix"""
    def __init__(self, lists):
        self.list = lists

    def __str__(self):
        return str('\n'.join(str(row) for row in self.list))

    def __add__(self, other):
        if self.list.shape == other.list.shape:
            return self.list + other.list
        else:
            raise MyError("Размеры матриц не совпадают")

a1 = np.array([[3, 3, 3], [5, 5, 5]], int)
a2 = np.array([[1, 1, 1], [2, 2, 2]], int)
a3 = np.array([[4, 4, 4], [6, 6, 6], [8, 8, 8]], int)
a4 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], int)
a5 = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]], int)
a6 = np.array([[10, 20], [40, 50]], int)

m1 = Matrix(a1)
m2 = Matrix(a2)
m3 = Matrix(a3)
print(Matrix(a4) + Matrix(a4))
# print(Matrix(a4))
# print(b)
